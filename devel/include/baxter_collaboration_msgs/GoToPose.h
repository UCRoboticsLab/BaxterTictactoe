// Generated by gencpp from file baxter_collaboration_msgs/GoToPose.msg
// DO NOT EDIT!


#ifndef BAXTER_COLLABORATION_MSGS_MESSAGE_GOTOPOSE_H
#define BAXTER_COLLABORATION_MSGS_MESSAGE_GOTOPOSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Quaternion.h>

namespace baxter_collaboration_msgs
{
template <class ContainerAllocator>
struct GoToPose_
{
  typedef GoToPose_<ContainerAllocator> Type;

  GoToPose_()
    : type()
    , ctrl_mode(0)
    , position()
    , orientation()
    , increment(0.0)  {
    }
  GoToPose_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , ctrl_mode(0)
    , position(_alloc)
    , orientation(_alloc)
    , increment(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef int32_t _ctrl_mode_type;
  _ctrl_mode_type ctrl_mode;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef double _increment_type;
  _increment_type increment;


    enum { POSITION_MODE = 1 };
     enum { VELOCITY_MODE = 2 };
     enum { RAW_POSITION_MODE = 4 };
 

  typedef boost::shared_ptr< ::baxter_collaboration_msgs::GoToPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::baxter_collaboration_msgs::GoToPose_<ContainerAllocator> const> ConstPtr;

}; // struct GoToPose_

typedef ::baxter_collaboration_msgs::GoToPose_<std::allocator<void> > GoToPose;

typedef boost::shared_ptr< ::baxter_collaboration_msgs::GoToPose > GoToPosePtr;
typedef boost::shared_ptr< ::baxter_collaboration_msgs::GoToPose const> GoToPoseConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::baxter_collaboration_msgs::GoToPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::baxter_collaboration_msgs::GoToPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace baxter_collaboration_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'baxter_collaboration_msgs': ['/home/baxterdev/scazLab2_ws/src/baxter_collaboration/baxter_collaboration_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::baxter_collaboration_msgs::GoToPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::baxter_collaboration_msgs::GoToPose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::baxter_collaboration_msgs::GoToPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::baxter_collaboration_msgs::GoToPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::baxter_collaboration_msgs::GoToPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::baxter_collaboration_msgs::GoToPose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::baxter_collaboration_msgs::GoToPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3ea4877a0729c590d3f811d62c09337d";
  }

  static const char* value(const ::baxter_collaboration_msgs::GoToPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3ea4877a0729c590ULL;
  static const uint64_t static_value2 = 0xd3f811d62c09337dULL;
};

template<class ContainerAllocator>
struct DataType< ::baxter_collaboration_msgs::GoToPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "baxter_collaboration_msgs/GoToPose";
  }

  static const char* value(const ::baxter_collaboration_msgs::GoToPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::baxter_collaboration_msgs::GoToPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Type of command to send. It can be one of the following:\n\
# pose        to request a 6D pose\n\
# position    to request a 3D position and keeping the current orientation\n\
# relative_x  to request an increment relative to the current pose in the x axis\n\
# relative_y  to request an increment relative to the current pose in the y axis\n\
# relative_z  to request an increment relative to the current pose in the z axis\n\
# stop        to stop the motion of the robot altogether (if it was moving)\n\
string type\n\
\n\
# Control mode to control the robot with. For now, only position mode is\n\
# allowed. In the near future, also velocity mode will be allowed, in order\n\
# to directly control the robot's joints in velocity.\n\
int32     POSITION_MODE = 1\n\
int32     VELOCITY_MODE = 2\n\
int32 RAW_POSITION_MODE = 4\n\
\n\
int32 ctrl_mode\n\
\n\
# \"POSE\" AND \"POSITION\" GOTOPOSE MESSAGE TYPE\n\
# Endpoint Pose to request Inverse-Kinematics joint solutions for.\n\
# If type is set to position, orientation is ignored and the end effector\n\
# will be moved to the desired position with the current orientation.\n\
geometry_msgs/Point      position\n\
geometry_msgs/Quaternion orientation\n\
\n\
# \"RELATIVE\" GOTOPOSE MESSAGE TYPE\n\
# increment is in meters, and will move the end effector in the desired\n\
# direction, specified by the type\n\
float64 increment\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::baxter_collaboration_msgs::GoToPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::baxter_collaboration_msgs::GoToPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.ctrl_mode);
      stream.next(m.position);
      stream.next(m.orientation);
      stream.next(m.increment);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoToPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::baxter_collaboration_msgs::GoToPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::baxter_collaboration_msgs::GoToPose_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "ctrl_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ctrl_mode);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "increment: ";
    Printer<double>::stream(s, indent + "  ", v.increment);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BAXTER_COLLABORATION_MSGS_MESSAGE_GOTOPOSE_H
