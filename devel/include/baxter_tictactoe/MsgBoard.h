// Generated by gencpp from file baxter_tictactoe/MsgBoard.msg
// DO NOT EDIT!


#ifndef BAXTER_TICTACTOE_MESSAGE_MSGBOARD_H
#define BAXTER_TICTACTOE_MESSAGE_MSGBOARD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <baxter_tictactoe/MsgCell.h>

namespace baxter_tictactoe
{
template <class ContainerAllocator>
struct MsgBoard_
{
  typedef MsgBoard_<ContainerAllocator> Type;

  MsgBoard_()
    : header()
    , cells()  {
    }
  MsgBoard_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , cells()  {
  (void)_alloc;
      cells.assign( ::baxter_tictactoe::MsgCell_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array< ::baxter_tictactoe::MsgCell_<ContainerAllocator> , 9>  _cells_type;
  _cells_type cells;




  typedef boost::shared_ptr< ::baxter_tictactoe::MsgBoard_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::baxter_tictactoe::MsgBoard_<ContainerAllocator> const> ConstPtr;

}; // struct MsgBoard_

typedef ::baxter_tictactoe::MsgBoard_<std::allocator<void> > MsgBoard;

typedef boost::shared_ptr< ::baxter_tictactoe::MsgBoard > MsgBoardPtr;
typedef boost::shared_ptr< ::baxter_tictactoe::MsgBoard const> MsgBoardConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::baxter_tictactoe::MsgBoard_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::baxter_tictactoe::MsgBoard_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace baxter_tictactoe

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'baxter_tictactoe': ['/home/baxterdev/scazLab2_ws/src/baxter_tictactoe/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'baxter_core_msgs': ['/home/baxterdev/scazLab2_ws/src/baxter_common/baxter_core_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::baxter_tictactoe::MsgBoard_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::baxter_tictactoe::MsgBoard_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::baxter_tictactoe::MsgBoard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::baxter_tictactoe::MsgBoard_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::baxter_tictactoe::MsgBoard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::baxter_tictactoe::MsgBoard_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::baxter_tictactoe::MsgBoard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "645f8ed617827125a30622a0a80414b8";
  }

  static const char* value(const ::baxter_tictactoe::MsgBoard_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x645f8ed617827125ULL;
  static const uint64_t static_value2 = 0xa30622a0a80414b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::baxter_tictactoe::MsgBoard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "baxter_tictactoe/MsgBoard";
  }

  static const char* value(const ::baxter_tictactoe::MsgBoard_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::baxter_tictactoe::MsgBoard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
baxter_tictactoe/MsgCell[9] cells\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: baxter_tictactoe/MsgCell\n\
# Information from each cell in the board\n\
# Index of each cell in the array:\n\
#            _ _ _ _ _ _\n\
#           |_0_|_1_|_2_|\n\
#           |_3_|_4_|_5_|\n\
#           |_6_|_7_|_8_|\n\
#\n\
# Possible values:\n\
#       0=empty cell\n\
#       1=blue token (X)\n\
#       2=red token (O)\n\
\n\
string EMPTY=empty\n\
string BLUE=blue\n\
string RED=red\n\
\n\
string state\n\
";
  }

  static const char* value(const ::baxter_tictactoe::MsgBoard_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::baxter_tictactoe::MsgBoard_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.cells);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MsgBoard_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::baxter_tictactoe::MsgBoard_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::baxter_tictactoe::MsgBoard_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "cells[]" << std::endl;
    for (size_t i = 0; i < v.cells.size(); ++i)
    {
      s << indent << "  cells[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::baxter_tictactoe::MsgCell_<ContainerAllocator> >::stream(s, indent + "    ", v.cells[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BAXTER_TICTACTOE_MESSAGE_MSGBOARD_H
