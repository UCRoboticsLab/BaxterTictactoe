// Generated by gencpp from file ros_speech2text/transcript.msg
// DO NOT EDIT!


#ifndef ROS_SPEECH2TEXT_MESSAGE_TRANSCRIPT_H
#define ROS_SPEECH2TEXT_MESSAGE_TRANSCRIPT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_speech2text
{
template <class ContainerAllocator>
struct transcript_
{
  typedef transcript_<ContainerAllocator> Type;

  transcript_()
    : start_time()
    , end_time()
    , speech_duration()
    , received_time()
    , transcript()
    , confidence(0.0)  {
    }
  transcript_(const ContainerAllocator& _alloc)
    : start_time()
    , end_time()
    , speech_duration()
    , received_time()
    , transcript(_alloc)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _start_time_type;
  _start_time_type start_time;

   typedef ros::Time _end_time_type;
  _end_time_type end_time;

   typedef ros::Time _speech_duration_type;
  _speech_duration_type speech_duration;

   typedef ros::Time _received_time_type;
  _received_time_type received_time;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _transcript_type;
  _transcript_type transcript;

   typedef double _confidence_type;
  _confidence_type confidence;




  typedef boost::shared_ptr< ::ros_speech2text::transcript_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_speech2text::transcript_<ContainerAllocator> const> ConstPtr;

}; // struct transcript_

typedef ::ros_speech2text::transcript_<std::allocator<void> > transcript;

typedef boost::shared_ptr< ::ros_speech2text::transcript > transcriptPtr;
typedef boost::shared_ptr< ::ros_speech2text::transcript const> transcriptConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_speech2text::transcript_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_speech2text::transcript_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_speech2text

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'ros_speech2text': ['/home/baxterdev/scazLab2_ws/src/ros_speech2text/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_speech2text::transcript_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_speech2text::transcript_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_speech2text::transcript_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_speech2text::transcript_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_speech2text::transcript_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_speech2text::transcript_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_speech2text::transcript_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9468cf1be19f95e683e9182c02ec764a";
  }

  static const char* value(const ::ros_speech2text::transcript_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9468cf1be19f95e6ULL;
  static const uint64_t static_value2 = 0x83e9182c02ec764aULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_speech2text::transcript_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_speech2text/transcript";
  }

  static const char* value(const ::ros_speech2text::transcript_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_speech2text::transcript_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time start_time\n\
time end_time\n\
time speech_duration\n\
time received_time\n\
string transcript\n\
float64 confidence\n\
";
  }

  static const char* value(const ::ros_speech2text::transcript_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_speech2text::transcript_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_time);
      stream.next(m.end_time);
      stream.next(m.speech_duration);
      stream.next(m.received_time);
      stream.next(m.transcript);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct transcript_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_speech2text::transcript_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_speech2text::transcript_<ContainerAllocator>& v)
  {
    s << indent << "start_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_time);
    s << indent << "end_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.end_time);
    s << indent << "speech_duration: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.speech_duration);
    s << indent << "received_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.received_time);
    s << indent << "transcript: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.transcript);
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SPEECH2TEXT_MESSAGE_TRANSCRIPT_H
