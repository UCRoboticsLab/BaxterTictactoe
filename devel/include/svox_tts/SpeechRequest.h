// Generated by gencpp from file svox_tts/SpeechRequest.msg
// DO NOT EDIT!


#ifndef SVOX_TTS_MESSAGE_SPEECHREQUEST_H
#define SVOX_TTS_MESSAGE_SPEECHREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace svox_tts
{
template <class ContainerAllocator>
struct SpeechRequest_
{
  typedef SpeechRequest_<ContainerAllocator> Type;

  SpeechRequest_()
    : mode(0)
    , string()
    , value(0)  {
    }
  SpeechRequest_(const ContainerAllocator& _alloc)
    : mode(0)
    , string(_alloc)
    , value(0)  {
  (void)_alloc;
    }



   typedef int32_t _mode_type;
  _mode_type mode;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _string_type;
  _string_type string;

   typedef int32_t _value_type;
  _value_type value;


    enum { SET_LANGUAGE = 1 };
     enum { GET_LANGUAGE = 11 };
     enum { SET_SPEED = 2 };
     enum { GET_SPEED = 22 };
     enum { SET_PITCH = 3 };
     enum { GET_PITCH = 33 };
     enum { GET_SUPPORTED_LANG = 4 };
     enum { SAY = 5 };
     enum { RESET = 6 };
 

  typedef boost::shared_ptr< ::svox_tts::SpeechRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::svox_tts::SpeechRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SpeechRequest_

typedef ::svox_tts::SpeechRequest_<std::allocator<void> > SpeechRequest;

typedef boost::shared_ptr< ::svox_tts::SpeechRequest > SpeechRequestPtr;
typedef boost::shared_ptr< ::svox_tts::SpeechRequest const> SpeechRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::svox_tts::SpeechRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::svox_tts::SpeechRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace svox_tts

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::svox_tts::SpeechRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::svox_tts::SpeechRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svox_tts::SpeechRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svox_tts::SpeechRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svox_tts::SpeechRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svox_tts::SpeechRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::svox_tts::SpeechRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5148bb7b57100fa8ac65d1c76be3b118";
  }

  static const char* value(const ::svox_tts::SpeechRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5148bb7b57100fa8ULL;
  static const uint64_t static_value2 = 0xac65d1c76be3b118ULL;
};

template<class ContainerAllocator>
struct DataType< ::svox_tts::SpeechRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "svox_tts/SpeechRequest";
  }

  static const char* value(const ::svox_tts::SpeechRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::svox_tts::SpeechRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   mode\n\
string  string\n\
int32   value\n\
\n\
int32 SET_LANGUAGE=1\n\
int32 GET_LANGUAGE=11\n\
int32 SET_SPEED=2\n\
int32 GET_SPEED=22\n\
int32 SET_PITCH=3\n\
int32 GET_PITCH=33\n\
int32 GET_SUPPORTED_LANG=4\n\
int32 SAY=5\n\
int32 RESET=6\n\
";
  }

  static const char* value(const ::svox_tts::SpeechRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::svox_tts::SpeechRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.string);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeechRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::svox_tts::SpeechRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::svox_tts::SpeechRequest_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "string: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.string);
    s << indent << "value: ";
    Printer<int32_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SVOX_TTS_MESSAGE_SPEECHREQUEST_H
