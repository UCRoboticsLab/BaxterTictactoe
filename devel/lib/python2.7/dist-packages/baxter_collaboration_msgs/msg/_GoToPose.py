# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from baxter_collaboration_msgs/GoToPose.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class GoToPose(genpy.Message):
  _md5sum = "3ea4877a0729c590d3f811d62c09337d"
  _type = "baxter_collaboration_msgs/GoToPose"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Type of command to send. It can be one of the following:
# pose        to request a 6D pose
# position    to request a 3D position and keeping the current orientation
# relative_x  to request an increment relative to the current pose in the x axis
# relative_y  to request an increment relative to the current pose in the y axis
# relative_z  to request an increment relative to the current pose in the z axis
# stop        to stop the motion of the robot altogether (if it was moving)
string type

# Control mode to control the robot with. For now, only position mode is
# allowed. In the near future, also velocity mode will be allowed, in order
# to directly control the robot's joints in velocity.
int32     POSITION_MODE = 1
int32     VELOCITY_MODE = 2
int32 RAW_POSITION_MODE = 4

int32 ctrl_mode

# "POSE" AND "POSITION" GOTOPOSE MESSAGE TYPE
# Endpoint Pose to request Inverse-Kinematics joint solutions for.
# If type is set to position, orientation is ignored and the end effector
# will be moved to the desired position with the current orientation.
geometry_msgs/Point      position
geometry_msgs/Quaternion orientation

# "RELATIVE" GOTOPOSE MESSAGE TYPE
# increment is in meters, and will move the end effector in the desired
# direction, specified by the type
float64 increment


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  # Pseudo-constants
  POSITION_MODE = 1
  VELOCITY_MODE = 2
  RAW_POSITION_MODE = 4

  __slots__ = ['type','ctrl_mode','position','orientation','increment']
  _slot_types = ['string','int32','geometry_msgs/Point','geometry_msgs/Quaternion','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,ctrl_mode,position,orientation,increment

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GoToPose, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = ''
      if self.ctrl_mode is None:
        self.ctrl_mode = 0
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      if self.increment is None:
        self.increment = 0.
    else:
      self.type = ''
      self.ctrl_mode = 0
      self.position = geometry_msgs.msg.Point()
      self.orientation = geometry_msgs.msg.Quaternion()
      self.increment = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i8d.pack(_x.ctrl_mode, _x.position.x, _x.position.y, _x.position.z, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.increment))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.ctrl_mode, _x.position.x, _x.position.y, _x.position.z, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.increment,) = _struct_i8d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i8d.pack(_x.ctrl_mode, _x.position.x, _x.position.y, _x.position.z, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.increment))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.ctrl_mode, _x.position.x, _x.position.y, _x.position.z, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.increment,) = _struct_i8d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i8d = struct.Struct("<i8d")
