# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_speech2text/transcript.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class transcript(genpy.Message):
  _md5sum = "9468cf1be19f95e683e9182c02ec764a"
  _type = "ros_speech2text/transcript"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time start_time
time end_time
time speech_duration
time received_time
string transcript
float64 confidence"""
  __slots__ = ['start_time','end_time','speech_duration','received_time','transcript','confidence']
  _slot_types = ['time','time','time','time','string','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start_time,end_time,speech_duration,received_time,transcript,confidence

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(transcript, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.start_time is None:
        self.start_time = genpy.Time()
      if self.end_time is None:
        self.end_time = genpy.Time()
      if self.speech_duration is None:
        self.speech_duration = genpy.Time()
      if self.received_time is None:
        self.received_time = genpy.Time()
      if self.transcript is None:
        self.transcript = ''
      if self.confidence is None:
        self.confidence = 0.
    else:
      self.start_time = genpy.Time()
      self.end_time = genpy.Time()
      self.speech_duration = genpy.Time()
      self.received_time = genpy.Time()
      self.transcript = ''
      self.confidence = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_8I.pack(_x.start_time.secs, _x.start_time.nsecs, _x.end_time.secs, _x.end_time.nsecs, _x.speech_duration.secs, _x.speech_duration.nsecs, _x.received_time.secs, _x.received_time.nsecs))
      _x = self.transcript
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.start_time is None:
        self.start_time = genpy.Time()
      if self.end_time is None:
        self.end_time = genpy.Time()
      if self.speech_duration is None:
        self.speech_duration = genpy.Time()
      if self.received_time is None:
        self.received_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.start_time.secs, _x.start_time.nsecs, _x.end_time.secs, _x.end_time.nsecs, _x.speech_duration.secs, _x.speech_duration.nsecs, _x.received_time.secs, _x.received_time.nsecs,) = _struct_8I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.transcript = str[start:end].decode('utf-8')
      else:
        self.transcript = str[start:end]
      start = end
      end += 8
      (self.confidence,) = _struct_d.unpack(str[start:end])
      self.start_time.canon()
      self.end_time.canon()
      self.speech_duration.canon()
      self.received_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_8I.pack(_x.start_time.secs, _x.start_time.nsecs, _x.end_time.secs, _x.end_time.nsecs, _x.speech_duration.secs, _x.speech_duration.nsecs, _x.received_time.secs, _x.received_time.nsecs))
      _x = self.transcript
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.start_time is None:
        self.start_time = genpy.Time()
      if self.end_time is None:
        self.end_time = genpy.Time()
      if self.speech_duration is None:
        self.speech_duration = genpy.Time()
      if self.received_time is None:
        self.received_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.start_time.secs, _x.start_time.nsecs, _x.end_time.secs, _x.end_time.nsecs, _x.speech_duration.secs, _x.speech_duration.nsecs, _x.received_time.secs, _x.received_time.nsecs,) = _struct_8I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.transcript = str[start:end].decode('utf-8')
      else:
        self.transcript = str[start:end]
      start = end
      end += 8
      (self.confidence,) = _struct_d.unpack(str[start:end])
      self.start_time.canon()
      self.end_time.canon()
      self.speech_duration.canon()
      self.received_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8I = struct.Struct("<8I")
_struct_d = struct.Struct("<d")
