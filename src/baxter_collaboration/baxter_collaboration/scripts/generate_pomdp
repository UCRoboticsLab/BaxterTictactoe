#!/usr/bin/env python

import os
import sys
import argparse

from task_models.lib.pomdp import GraphPolicyRunner, GraphPolicyBeliefRunner

from task_models.task import (HierarchicalTask, AbstractAction, SequentialCombination,
                              LeafCombination)
from task_models.task_to_pomdp import CollaborativeAction, HTMToPOMDP
from task_models.stool_scenarios import (stool_task_sequential, T_WAIT, T_ASK, T_TELL,
                                         C_INTR, C_ERR, INF)

from baxter_collaboration.graph_policy_controller import BaseGPController
from baxter_collaboration.service_request import ServiceRequest

parser = argparse.ArgumentParser(
    description="Script to generate, solve, and store POMDP and policy.")
parser.add_argument('path', help='path to store pomdp.json and policy.json')
parser.add_argument('--visualization', action='store_true',
                    help='if set, generate policy visualizations')


args = parser.parse_args(sys.argv[1:])

h2p = HTMToPOMDP(T_WAIT, T_ASK, T_TELL, C_INTR, end_reward=0.3, loop=False,
                 no_answer=True)
p = h2p.task_to_pomdp(stool_task_sequential)
gp = p.solve(method='grid', n_iterations=500, verbose=True)

p.save_as_json(os.path.join(args.path, 'pomdp.json'))
gp.save_as_json(os.path.join(args.path, 'policy.json'))
