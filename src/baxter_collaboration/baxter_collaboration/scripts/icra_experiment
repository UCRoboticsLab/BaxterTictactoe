#!/usr/bin/env python

import os
import sys
import argparse

from task_models.lib.pomdp import (POMDP, GraphPolicy, GraphPolicyRunner,
                           GraphPolicyBeliefRunner)

import rospy
from baxter_collaboration.graph_policy_controller import BaseGPController
from baxter_collaboration.service_request import ServiceRequest


parser = argparse.ArgumentParser(
    description="Script to run users for ICRA 2017 experiment.")
parser.add_argument(
    'path',
    help='path used for experiment, must contain pomdp.json and policy.json')
parser.add_argument('user', help='user id, used for storing times')

T_FAKE = 10


class GPController(BaseGPController):

    OBJ = {
        'left-leg': 17,
        'right-leg': 26,
        'central-frame': 24,
        'top': 21,
    }
    PAST = {
        'snap': 'snapped',
        'take': 'taken',
        'get': 'got',
        'hold': 'held',
    }
    GET = 'get'
    PASS = 'pass'
    HOLD = 'start_hold'
    RELEASE = 'end_hold'
    HAND_OVER = 'hand_over'
    RECOVER_GET = 'recover_get'
    RECOVER_HOLD = 'home'

    def take_action(self, action):
        if action == 'wait':
            return self.action_wait()
        else:
            t, a = action.split('-', 1)
            if t == 'phy':
                return self.action_physical(a)
            elif t == 'com':
                return self.action_communicate(a)
            else:
                raise ValueError('Unknown action: {}'.format(action))

    def action_physical(self, action):
        name, obj = action.split('-', 1)
        rospy.loginfo("Taking action: {} on {}".format(name, obj))
        o = self.OBJ[obj]
        if name in ['bring', 'get']:
            result = self.action_left(self.GET, o).success
            if result:
                return self.NONE
            else:
                result = self.action_left(self.RECOVER_GET, o)
                if not result:
                    raise RuntimeError("Action 'recover get' failed.")
                return self.ERROR
        elif name == 'hold':
            rqr = ServiceRequest(self.action_right, self.HAND_OVER, o)
            rql = ServiceRequest(self.action_left, self.HAND_OVER, o)
            result = rqr.wait_result().success
            result = result and rql.wait_result().success
            return self.NONE if result else self.ERROR
        elif name == 'release':
            result = self.action_right(self.RELEASE, o)
            return self.NONE if result else self.ERROR
        elif name == 'snap':
            self.action_left(self.HOME, o).success
            error = self.error_sub.wait_for_msg(timeout=T_FAKE)
            return self.NO if error else self.NONE
        else:
            raise ValueError('Unkown physical action: {}'.format(name))

    def action_communicate(self, action):
        v, c, a, o = action.split('-', 3)
        sentence = self._get_sentence(v, c, a, o)
        rospy.loginfo("{}ing: \"{}\"".format(v.capitalize(), sentence))
        ans = self.answer_sub.start_listening()
        self.say(sentence, sync=False)
        if v == 'ask':
            ans = self.answer_sub.wait_for_msg(continuing=True)
            if ans is None:
                return self.NONE  # Question at wrong time
            elif ans == 'yes':
                if a == 'hold' and c == 'intention':
                    rp = ServiceRequest(self.action_left, self.PASS, self.OBJ[o])
                    rospy.sleep(rospy.Duration(.7))
                    rh = ServiceRequest(self.action_right, self.HOLD, self.OBJ[o])
                    result = rp.wait_result().success
                    result = result and rh.wait_result().success
                    if not result:
                        return self.ERROR
                elif a == 'snap' and c == 'intention':
                    result = self.action_left(self.PASS, self.OBJ[o])
                    if not result:
                        return self.ERROR
                return self.YES
            elif ans == 'no':
                return self.NO
            else:
                raise ValueError('Unknown answer: ' + ans)
        else:
            return self.NONE

    def _get_sentence(self, v, c, a, o):
        o_name = o.replace('-', ' ')
        if v == 'ask':
            if c == 'intention':
                if a == 'hold':
                    sentence = "Can you pass the central frame to my right hand?"
                else:
                    sentence = "Can you {} the {}?".format(a, o_name)
            elif c == 'finished':
                sentence = "Have you {} the {}?".format(self.PAST[a], o_name)
            else:
                raise ValueError('Unknown question')
        elif v == 'tell':
            aux = 'going'
            if a == 'release':
                aux = 'ready'
            sentence = "I'm {} to {} the {}.".format(aux, a, o_name)
        else:
            raise ValueError('Unknown verbal action: {}'.format(v))
        return sentence

args = parser.parse_args(sys.argv[1:])
p = POMDP.load_from_json(os.path.join(args.path, 'pomdp.json'))
gp = GraphPolicy.load_from_json(os.path.join(args.path, 'policy.json'))
timer_path = os.path.join(args.path, 'timer-{}.json'.format(args.user))

controller = GPController(GraphPolicyRunner(gp), timer_path=timer_path)
rospy.set_param('/action_provider/internal_recovery', False)
controller.run()
