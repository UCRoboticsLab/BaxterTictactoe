#!/usr/bin/env python

import os
import sys
import json
import random
import argparse

from task_models.lib.pomdp import (GraphPolicyBeliefRunner, GraphPolicy,
                                   GraphPolicyRunner, POMDP)
from task_models.bring_next_to_pomdp import HTMToPOMDP
from task_models.tower_problem import TowerProblem

import rospy
from std_msgs.msg import String
from baxter_collaboration.graph_policy_controller import BaseGPController
from baxter_collaboration.service_request import ServiceRequest


parser = argparse.ArgumentParser(
    description="Script to run users for the Tower building experiment.")
parser.add_argument(
    'path',
    help='path used for experiment, must contain pomdp.json and policy.json')
parser.add_argument('user', help='user id, used for storing times')
parser.add_argument('task', choices=['simple', 'medium', 'complex'], help='complexity of the task')
parser.add_argument('--wizard', action='store_true',
                    help='if set, use remote controle')
parser.add_argument('--generate', action='store_true',
                    help='if set, generate and solve POMDP')


T_FAKE = 10
TOWERS = ['Wood', 'White', 'Blue']
COLORS = ['burlywood', '#FFFFF0', 'dodgerblue']


args = parser.parse_args(sys.argv[1:])
pomdp_file = os.path.join(args.path, 'pomdp-{}.json'.format(args.task))
policy_file = os.path.join(args.path, 'policy-{}.json'.format(args.task))
belief_policy_file = os.path.join(args.path, 'belief-policy-{}.json'.format(args.task))

tp = TowerProblem()
h2p = HTMToPOMDP(2., 8., 5., tp.parts, end_reward=50., loop=False)
# Simple
orders_simple = [tp.v_first(), tp.h_first()]
# Medium
orders_medium = [
    [2, 0, 4, 3, 1, 5],
    [2, 4, 0, 3, 5, 1],
    tp.v_first(),
    [0, 1, 4, 5, 2, 3],
    [2, 3, 0, 1, 4, 5],
    [2, 3, 4, 5, 0, 1],
    ]
# Complex
orders_complex = [
    tp.v_first(),
    [0, 1, 4, 5, 2, 3],
    [2, 3, 0, 1, 4, 5],
    [2, 3, 4, 5, 0, 1],
    [4, 5, 0, 1, 2, 3],
    [4, 5, 2, 3, 0, 1],
    tp.h_first(),
    [0, 4, 2, 1, 5, 3],
    [2, 0, 4, 3, 1, 5],
    [2, 4, 0, 3, 5, 1],
    [4, 0, 2, 5, 1, 3],
    [4, 2, 0, 5, 3, 1],
    ]

if args.task == 'simple':
    orders = orders_simple
elif args.task == 'medium':
    orders = orders_medium
elif args.task == 'complex':
    orders = orders_complex
else:
    raise ValueError

task = tp.task_from_orders(
        orders, names=['-'.join([str(i) for i in o]) for o in orders])

human_order = random.choice(orders)
order_file = os.path.join(args.path, 'order-{}-{}-{}'.format(
    args.user, args.task, 'wizard' if args.wizard else 'robot'))
with open(order_file, 'w') as f:
    f.write(str(human_order))


web_pub = rospy.Publisher('/web_interface/sub', String, queue_size=2)
woz_pub = rospy.Publisher('/wizard_of_oz/sub', String, queue_size=1)


def send_tower_order(order):
    part_order = [None] * len(order)
    for i, p in enumerate(order):
        part_order[p] = i
    tower_display = {
        "towers": [
                {"name": "{} Tower".format(TOWERS[i]),
                "x0": i,
                "blocks": [
                    {"label": part_order[2 * i], "color": COLORS[i]},
                    {"label": part_order[2 * i + 1], "color": COLORS[i]},
                    ]
                } for i in range(len(TOWERS))]
        }
    web_pub.publish(json.dumps(tower_display))      
    web_pub.publish('start')
    woz_pub.publish('start')


if args.wizard:
    rospy.init_node('wizard_init')
    send_tower_order(human_order)
    rospy.loginfo('Order: {}'.format(human_order))
    sys.exit(0)

if not os.path.exists(pomdp_file) or args.generate:
    # Generate and solve POMDP
    p = h2p.task_to_pomdp(task)
    gp = p.solve(method='grid', grid_type='pairwise', n_iterations=50,
                verbose=True)
    # Save POMDP and policy
    p.save_as_json(pomdp_file)
    gp.save_as_json(policy_file)
    # Compute belief trajectories
    pol = GraphPolicyBeliefRunner(gp, p)
    #pol.save_trajectories_from_starts(
    #    os.path.join(os.path.join(args.path, 'trajectories.json')),
    #    horizon=10, indent=2)
    gp2 = pol.visit()
    gp2.save_as_json(belief_policy_file)
else:
    # Load policy and POMDP
    p = POMDP.load_from_json(pomdp_file)
    gp = GraphPolicy.load_from_json(policy_file)
    pol = GraphPolicyBeliefRunner(gp, p)


class GPController(BaseGPController):

    OBJ = {'0': 2, '1': 3, '2': 5, '3': 6, '4': 8, '5': 9}
    GET = 'get_pass'

    def __init__(self, *args, **kargs):
        kargs['right'] = False
        super(GPController, self).__init__(*args, **kargs)
        self.answer_sub.timeout = 200

    def take_action(self, action):
        a, o = action.split('-', 1)
        if a == 'get':
            return self.action_get(o)
        elif a == 'ask':
            return self.action_ask(o)
        else:
            raise ValueError('Unknown action: {}'.format(action))

    def action_get(self, obj):
        rospy.loginfo("Bringing: {}.".format(obj))
        result = self.action_left(self.GET, self.OBJ[obj]).success
        if result:
            return self.NONE
        else:
            return self.ERROR  # Currently interpreted as success by POMDP

    def action_ask(self, obj):
        sentence = self._get_sentence(int(obj))
        rospy.loginfo("Asking: \"{}\"".format(sentence))
        ans = self.answer_sub.start_listening()
        self.say(sentence, sync=False)
        ans = self.answer_sub.wait_for_msg(continuing=True)
        if ans is None or ans == 'stop':
            return self.NONE  # Not handled
        elif ans == 'yes':
            return self.YES
        elif ans == 'no':
            return self.NO
        else:
            raise ValueError('Unknown answer: ' + ans)

    def _get_sentence(self, o):
        t = TOWERS[o // 2]
        f = ['bottom', 'top'][o % 2]
        return "Do you need the {} of {} tower?".format(f, t)


timer_path = os.path.join(args.path, 'timer-{}-{}.json'.format(args.user, args.task))
#controller = GPController(GraphPolicyRunner(gp), timer_path=timer_path)
controller = GPController(pol, timer_path=timer_path)
send_tower_order(human_order)

#rospy.set_param('/action_provider/internal_recovery', False)
controller.run()
